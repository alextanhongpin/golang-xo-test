// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

// Person represents a row from 'public.person'.
type Person struct {
	ID        uuid.UUID   `json:"id"`         // id
	Name      string      `json:"name"`       // name
	Email     string      `json:"email"`      // email
	DeletedAt pq.NullTime `json:"deleted_at"` // deleted_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Person exists in the database.
func (p *Person) Exists() bool {
	return p._exists
}

// Deleted provides information if the Person has been deleted from the database.
func (p *Person) Deleted() bool {
	return p._deleted
}

// Insert inserts the Person to the database.
func (p *Person) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.person (` +
		`id, name, email, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		`RETURNING id`

	// run query
	XOLog(sqlstr, p.ID, p.Name, p.Email, p.DeletedAt)
	err = db.QueryRow(sqlstr, p.ID, p.Name, p.Email, p.DeletedAt).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Person in the database.
func (p *Person) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.person SET (` +
		`name, email, deleted_at` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, p.Name, p.Email, p.DeletedAt, p.ID)
	_, err = db.Exec(sqlstr, p.Name, p.Email, p.DeletedAt, p.ID)
	return err
}

// Save saves the Person to the database.
func (p *Person) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Person.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Person) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.person (` +
		`id, name, email, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, email, deleted_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.email, EXCLUDED.deleted_at` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Name, p.Email, p.DeletedAt)
	_, err = db.Exec(sqlstr, p.ID, p.Name, p.Email, p.DeletedAt)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Person from the database.
func (p *Person) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.person WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PersonByEmail retrieves a row from 'public.person' as a Person.
//
// Generated from index 'person_email_key'.
func PersonByEmail(db XODB, email string) (*Person, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, email, deleted_at ` +
		`FROM public.person ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	p := Person{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&p.ID, &p.Name, &p.Email, &p.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PersonByID retrieves a row from 'public.person' as a Person.
//
// Generated from index 'person_pkey'.
func PersonByID(db XODB, id uuid.UUID) (*Person, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, email, deleted_at ` +
		`FROM public.person ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Person{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Name, &p.Email, &p.DeletedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
